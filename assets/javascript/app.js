$(document).ready(function () {
  //display the running Clock at the top
  function runningClock() {
    time = moment().format("hh:mm:ss A");
    $("#time-display").text(time);
  }
  //  Call function with setInterval
  clock = setInterval(runningClock, 1000);

  //firebase link
  var config = {
    apiKey: "AIzaSyB7VLoWKRTvI-MImKjjn5P0y3XmiFoZzP8",
    authDomain: "project-0-31576.firebaseapp.com",
    databaseURL: "https://project-0-31576.firebaseio.com",
    projectId: "project-0-31576",
    storageBucket: "project-0-31576.appspot.com",
    messagingSenderId: "265748924710"
  };
  firebase.initializeApp(config);

  //database link 
  var database = firebase.database();

  //event listener for add train submit
  $("#add-train").on("click", function (event) {
    // Don't refresh the page!
    event.preventDefault();

    //lets create an Object to get the admin input track
    var newTrain = {
      name: $("#name-input").val().trim(),
      destination: $("#destination-input").val().trim(),
      track: $("#track-input option:selected").val(),
      firstTrain: $("#firstTrain-input").val().trim(),
      frequency: parseInt($("#frequency-input").val().trim()),
      stops: []
    };

    //for loop to fetch the stops with the values got from each stop input
    for (i = 1; i < 10; i++) {
      //lets build the input selector
      var selector = "#stop" + i + "-input";
      //console.log(`Selector: ${selector}`);
      if ($(selector).val().trim() !== "") {
        //put the value of the current input in stops
        newTrain.stops.push($(selector).val().trim());
        //console.log(`Stop N:${i} - ${$(selector).val().trim()}`);
      }
    }
    // Console log each of the user inputs to confirm we are receiving them correctly
    //console.log(`Train Name: ${newTrain.name} ||Dest: ${newTrain.destination} 
    //|| Train Track: ${newTrain.track}|| First train Time: ${newTrain.firstTrain} || Frequency: ${newTrain.frequency}`);
    // console.log(`Stops at: ${newTrain.stops.join("--")}`);

    //using push to add the data in firebase
    console.log(newTrain);
    database.ref("train-scheduler").push(newTrain);

    //clear the form
    $("#name-input").val(" ");
    $("#destination-input").val("");
    //$("#track-input option:selected").val(),
    $("#firstTrain-input").val("");
    $("#frequency-input").val("");
    $("#stop1-input").val(""); //stop10-input
    $("#stop2-input").val("");
    $("#stop3-input").val("");
    $("#stop4-input").val("");
    $("#stop5-input").val("");
    $("#stop6-input").val("");
    $("#stop7-input").val("");
    $("#stop8-input").val("");
    $("#stop9-input").val("");
    $("#stop10-input").val("");
  });

  //lets handle the display of the content of the db
  database.ref("train-scheduler").on("child_added", function (snapshot) {
    //console log the content returned
    console.log(snapshot.val());

    //get the values in the db cTrain refers to currentTrain
    var cTrain = snapshot.val().name;
    var cDestination = snapshot.val().destination;
    var cTrack = snapshot.val().track;
    var cfirstTrain = snapshot.val().firstTrain;
    var cFrequency = snapshot.val().frequency;
    //very important to get the key of the current train generated by firebase
    var cdataKey = snapshot.key;

    //calculation of departs and status
    var cStatus = 0;
    var cDeparts = 0;

    if (cfirstTrain !== "") {
      // First Time (pushed back 1 year to make sure it comes before current time)
      var cfirstTrainConverted = moment(cfirstTrain, "HH:mm").subtract(1, "years");
      console.log(cfirstTrain + "||" + cfirstTrainConverted);
      // Current Time
      var currentTime = moment();
      // Difference between the times
      var diffTime = moment().diff(moment(cfirstTrainConverted), "minutes");
      // Time apart (remainder)
      var tRemainder = diffTime % cFrequency;
      // Minute Until Train
      var tMinutesTillTrain = cFrequency - tRemainder;
      cStatus = tMinutesTillTrain;
      // Next Train
      var nextTrain = moment().add(tMinutesTillTrain, "minutes");
      cDeparts = moment(nextTrain).format("hh:mm");
    };

    //create a new row using Jquery
    var newRow = $("<tr>");
    // departs === Next arrival
    //Status === Minutes away
    var rowDeparts = $("<td>").text(cDeparts).appendTo(newRow);
    var rowName = $("<td>").text(cTrain).appendTo(newRow);
    var rowTrack = $("<td>").text(cTrack).appendTo(newRow);
    var rowDestination = $("<td>").text(cDestination).appendTo(newRow);
    var rowFrequency = $("<td>").text(cFrequency).appendTo(newRow);
    var rowStatus = $("<td>").text(`in ${cStatus} mn`).appendTo(newRow);

    //create the actions buttons for each child    
    var buttonStops = $("<button>").addClass("btn btn-outline-info btn-sm mr-2").text("Stops");
    var buttonUpdate = $("<button>").addClass("btn btn-outline-secondary btn-sm mr-2 my-1").text("Update");
    var buttonDelete = $("<button>").addClass("btn btn-outline-danger btn-sm").text("Delete");

    //very important link the buttons (data attribute with the key generated by firebase and to the corresponding modal)
    buttonStops
      .attr("id", "stops")
      .attr("data-key", cdataKey)
      .attr("data-toggle", "modal")
      .attr("data-target", "#stops-modal");
    buttonUpdate
      .attr("id", "update")
      .attr("data-key", cdataKey)
      .attr("data-toggle", "modal")
      .attr("data-target", "#update-modal");
    buttonDelete
      .attr("id", "delete")
      .attr("data-key", cdataKey)
      .attr("data-toggle", "modal")
      .attr("data-target", "#delete-modal");

    //append the buttons to the row
    var rowActions = $("<td>").append(buttonStops, buttonUpdate, buttonDelete).appendTo(newRow);

    //append the newRow to the existing table list-employees
    $("#list-trains").append(newRow);

  }, function (errorOject) {
    console.log("The read failed: " + errorObject.code);
  });


  //event listener for a click on the button stops to see the train stops
  $(document).on("click", "#stops", function (event) {
    //clear the ul list of stops
    $("#list-stop").empty();

    //get the value of the key as current key
    var ckey = $(this).attr("data-key");
    console.log(`Current Key:${ckey}`);

    //get the train infos with the key 
    var cTrain;
    database.ref("train-scheduler").child(ckey).on("value", function (snapshot) {
      console.log(snapshot.val());
      cTrain = snapshot.val();
    });
    //console.log(cTrain);
    //get only the array of stops into our var stop
    var stops = cTrain.stops;
    //$("#stops-modal-body").text(stops);

    // check if trains stop were added to this train
    if (stops.length > 0) {
      //for loop to create the list item to fetch the ul list-stop 
      for (var i = 0; i < stops.length; i++) {
        var liStop = $("<li>");
        liStop.addClass("list-group-item list-group-item-info");
        liStop.text(stops[i]);
        $("#list-stop").append(liStop);
      }
    } else {
      $("#stops-modal-body").text("No data available at this time");;
    }
  });

  //event listener for a click on update a train
  $(document).on("click", "#update", function (event) {
    //get the value of the key
    var key = $(this).attr("data-key");
    console.log(`Current Key:${key}`);
    //the train infos with the key 
    //confirm-update
      $(document).on("click", "#confirm-update", function (event) {

      //update the train with the key
     // database.ref("train-scheduler").child(ckey).remove();
     //still working on it :))
      
    });
  });
  //event listener for a click on delete a train
  $(document).on("click", "#delete", function (event) {
    //get the value of the key
    var ckey = $(this).attr("data-key");
    //console.log(`Current Key:${key}`);

    //get the value of the dom
    var $dom=$(this);

    //confirm delete
    $(document).on("click", "#confirm-delete", function (event) {

      //delete the train with the key
      database.ref("train-scheduler").child(ckey).remove();

      //delete the row from the table
      $($dom).parents('tr').remove();

      //get rid of the modal
      $("#delete-modal").modal('hide');
    });

  });

});